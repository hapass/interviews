Pavel Zavoiskikh
    Phone: +375333830439 (telegram), +380994801922 (calls)
    Email: pavel.zavoiskikh@gmail.com
    Github: https://github.com/hapass
    Medium: https://medium.com/@hapass
    Coursera: https://www.coursera.org/user/a6e5df5240aa9826c158a7d1c76e0e9f

Summary.

Education: Bachelor's degree in Computer Science. BSUIR, 2009 - 2014
Experience: 9 years of work experience. 6 years in game development.
Main programming languages: C#, C++.
English: B2.
Dream company: Small company consisting of professionals creating technically
               challenging games with finite set of features.

Career.

Developer, Ubisoft, 2020 - 2022
    Description: Skull and Bones game development
    Used intensively: C++, Anvil game engine
    Less so: C#, proprietary UI tools
    Done:
        * Ownership of a Settings subsystem. Decided how our Settings should evolve,
          implemented improvements to the subsystem,
          planned and splitted tasks between team members.
        * Fixed settings save system problems to be able to add and remove settings without loosing saves.
        * Did some contributions to game's Benchmark code.
        * Contributed to game engine by implementing some missing features required by Settings scope. 
          Fixed issues with graphics settings, added monitor abstraction to Ubisoft's proprietary graphics API,
          implemented switching between audio devices, fixed issues in localization system.
        * Mentoring a junior generalist programmer and two graphics interns.

Contributor, Defold Foundation, 2020
    Description: 2D game engine for web and mobile.
                 Once the engine got open-sourced in may I started contributing.
    Used intensively: C++.
    Less so: Clojure, Java, Python.
    Done:
        * Bug fixes in engine and editor. https://github.com/defold/defold/pulls?q=is%3Apr+author%3Ahapass+

Developer, Playtika, 2016 - 2020
    Description: casual poker game with 150K daily users - Poker Heat
                 casual solitaire game with 1.6M daily users - Solitaire Grand Harvest
    Used intensively: C++, C#, Murl game engine, In-house game engine, Haxe, Xamarin, Autofac, 
    Less so: Shell, Gradle, Java, Objective C, Groovy, OCaml, Python, Javascript, Typescript, Angular
    Done:
        * Had to make a haxe game, that was written for web, run on mobile.
          I solved the issue and as a result the game basically shared 90% of the code on all the platforms,
          which is the first time playtika was able to achieve this.
        * Did a lot of integration for third-party SDKs for achievements, authentication, ads, payments.
        * Did gameplay and UI programming.
        * Implemented authentication, messaging, payment subsystems,
          that abstracted game developers from using Playtika's back-end directly.
        * Debugged haxe compiler when it was freezing during poker compilation, and found a workaround.
        * Did fixes to game engine required for our games.
        * Implemented in-game tools for marketing team to be able to construct popups the way they want to.
        * Interviewed C++ developers for Solitaire.

Developer, Synesis, 2015 - 2016
    Description: multi-platform 2D race and shoot game with 2 different UI skins: Wild Ride/Rude Rider
    Used intensively: C#, .NET, Xamarin, TPL, Async-await, Autofac, In-house game engine
    Less so: Box2D
    Done:
        * Did a lot of integration for third-party SDKs for achievements, authentication, ads, payments.
        * Fixed interesting multi-threading issues.
        * Did some gameplay and UI programming.

Developer, Itransition, 2012 - 2015
    Description: a couple of outsorced projects, mostly web development.
    Used intensively: C#, ASP.NET MVC, EF, MS SQL Server, SignalR, HTML, CSS, Javascript,
                      AngularJS, KnockoutJS, JQuery, Jasmine, GruntJS
    Used less so: WCF
    Done:
        * Did a lot of full-stack web development using different technologies.
        * Basically lead one of the projects by myself. Did all the development and client communication.

Pet projects.

    * Implemented a software rasterizer. It can load and display a 3D model with phong lighting.
    * Implemented a DX12 reference to compare the result of my software rasterizer to hardware rasterizer.
    * Implemented a 2D game with simplistic graphics in raw WebGL for a game jam. 
      Created a little audio synthesizer using WebAudio to create and play sounds for this game.
    * Implemented gameplay for my clone of PopCap's rocket mania game in Unity.
      Also ported the same game to PixiJS.